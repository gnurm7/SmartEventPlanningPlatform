@model List<yazlab2mvc.Models.Etkinlikler>

<h2>@ViewBag.KullaniciKonum</h2>
<h2>Katılabileceğiniz Etkinlikler</h2>

<div id="map" style="height: 500px; width: 100%;"></div>

@if (Model != null && Model.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Etkinlik Adı</th>
                <th>Etkinlik Tarihi</th>
                <th>Etkinlik Saati</th>
                <th>Konum</th>
                <th>İşlem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var etkinlik in Model)
            {
                <tr>
                    <td>@etkinlik.EtkinlikAdi</td>
                    <td>@etkinlik.Tarih.ToString("dd MMMM yyyy")</td>
                    <td>@etkinlik.Saat.ToString(@"hh\:mm")</td>
                    <td>@etkinlik.Konum</td>
                    <td>
                        <form method="post" action="@Url.Action("EtkinligeKatil", "Kullanici")">
                            <input type="hidden" name="etkinlikID" value="@etkinlik.ID" />
                            <button type="submit" class="btn btn-primary">Etkinliğe Katıl</button>
                        </form>
                    </td>
                    <td id="distance-(@etkinlik.Konum)">
                        Mesafeler
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div id="route-info">
    <p id="route-distance"></p>
    <p id="route-duration"></p>
</div>

<script>
    const kullaniciKonum = "@ViewBag.KullaniciKonum";
    const etkinlikler = @Html.Raw(Json.Serialize(Model.Select(e => new { e.EtkinlikAdi, e.Konum })));

    function initMap() {
        const map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 41.0082, lng: 28.9784 },
            zoom: 10,
        });

        if (kullaniciKonum) {
            const [userLat, userLng] = kullaniciKonum.split(',').map(Number);
            const userMarker = new google.maps.Marker({
                position: { lat: userLat, lng: userLng },
                map: map,
                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
                title: "Kullanıcı Konumu",
            });
        }

        etkinlikler.$values.forEach(etkinlik => {
            const etkinlikID = etkinlik.ID;


            if (etkinlik.konum) {
                const [lat, lng] = etkinlik.konum.split(',').map(Number);
                const sanitizedTitle = etkinlik.etkinlikAdi.replace(/</g, "&lt;").replace(/>/g, "&gt;");

                const marker = new google.maps.Marker({
                    position: { lat: lat, lng: lng },
                    map: map,
                    title: sanitizedTitle,
                });

                console.log("E" + etkinlik.etkinlikAdi);

                // Her marker için ayrı bir InfoWindow oluştur
                const infoWindow = new google.maps.InfoWindow({
                    content: `<div><strong>${etkinlik.etkinlikAdi}</strong></div>`,
                });

                // Marker'a tıklanınca ilgili InfoWindow'u aç
                marker.addListener("click", () => {
                    infoWindow.open(map, marker,sanitizedTitle);
                });

                if (kullaniciKonum) {
                    const [userLat, userLng] = kullaniciKonum.split(',').map(Number);
                    const userLatLng = new google.maps.LatLng(userLat, userLng);
                    const etkinlikLatLng = new google.maps.LatLng(lat, lng);

                    const distance = google.maps.geometry.spherical.computeDistanceBetween(userLatLng, etkinlikLatLng) / 1000;

                    infoWindow.setContent(`<div><strong>${etkinlik.etkinlikAdi}</strong><br>Mesafe: ${distance} km</div>`);

                    const path = [userLatLng, etkinlikLatLng];
                    const polyline = new google.maps.Polyline({
                        path: path,
                        geodesic: true,
                        strokeColor: '#800080',
                        strokeOpacity: 1.0,
                        strokeWeight: 2
                    });
                    polyline.setMap(map);
                }

                // Rota hesaplama işlemi
                if (kullaniciKonum) {
                    const [userLat, userLng] = kullaniciKonum.split(',').map(Number);
                    const directionsService = new google.maps.DirectionsService();
                    const directionsRenderer = new google.maps.DirectionsRenderer();
                    directionsRenderer.setMap(map);

                    const userLatLng = new google.maps.LatLng(userLat, userLng);
                    const etkinlikLatLng = new google.maps.LatLng(lat, lng);

                    const travelModes = ['DRIVING', 'BICYCLING', 'WALKING'];

                    travelModes.forEach(mode => {
                        const request = {
                            origin: userLatLng,
                            destination: etkinlikLatLng,
                            travelMode: mode,
                        };

                        directionsService.route(request, (result, status) => {
                            if (status === 'OK') {
                                directionsRenderer.setDirections(result);
                                const route = result.routes[0];
                                const duration = route.legs[0].duration.text;
                                const distance = route.legs[0].distance.text;
                                // Tabloyu güncelle: Mesafeyi her etkinlik için yazdır
                                const distanceElement = document.getElementById(`distance-${etkinlikLatLng}`);
                                console.log(`${mode} ile Rota:`);
                                console.log(`Mesafe: ${distance}, Süre: ${duration}`);

                                // Update the HTML with the route information for DRIVING mode
                                if (mode === 'DRIVING') {
                                    document.getElementById("route-distance").textContent = `Mesafe: ${distance}`;
                                    document.getElementById("route-duration").textContent = `Süre: ${duration}`;
                                    if (distanceElement) {
                                        distanceElement.innerHTML += "<br>Sürüş Mesafe: " + distance + "<br>Sürüş Süresi : " + duration;//Brleri new line yaparsın ona üşendim işte anladın mantığını
                                    } else { console.log("YOk=distance-" + etkinlikLatLng); }
                                }
                                // Update the HTML with the route information for DRIVING mode
                                if (mode === 'WALKING') {
                                    document.getElementById("route-distance").textContent = `Mesafe: ${distance}`;
                                    document.getElementById("route-duration").textContent = `Süre: ${duration}`;
                                    if (distanceElement) {
                                        distanceElement.innerHTML += "<br>Yürüme Mesafe: " + distance + "<br>Yürüme Süresi : " + duration;
                                    } else { console.log("YOk=distance-" + etkinlikLatLng); }
                                }
                                if (mode === 'BICYCLING') {//Biliyom biliyomda hesaplayıp bulursa o mesafeyi burda yazdır diye hazırlıyom işte bak dur bi
                                    document.getElementById("route-distance").textContent = `Mesafe: ${distance}`;
                                    document.getElementById("route-duration").textContent = `Süre: ${duration}`;
                                    if (distanceElement) {
                                        distanceElement.innerHTML += "<br>Bisiklet Mesafe: " + distance + "<br>Bisikler Süresi : " + duration;
                                    } else { console.log("YOk=distance-" + etkinlikLatLng); }
                                }
                            } else {
                                console.error(`Rota hesaplanamadı: ${status}`);
                            }
                        });
                    });
                }
            }
        });
    }
</script>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBFXDO-G5xsoSOXpV0F-MLfOZ6_qBXHCFw&libraries=geometry&callback=initMap">
</script>
